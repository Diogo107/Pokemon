{"version":3,"sources":["logo.svg","Components/Pokemon/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","index","props","className","src","completePokemon","sprites","front_default","alt","name","stats","base_stat","types","type","axios","require","App","state","listOfPokemons","random","updateRandomPokemon","bind","get","list","data","results","Math","floor","url","this","setState","console","log","event","preventDefault","path","render","Form","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,8NCE5B,SAASC,EAAMC,GAC5B,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAKF,EAAMG,gBAAgBC,QAAQC,cAAeC,IAAKN,EAAMG,gBAAgBI,OAClF,6BACE,oCACA,2BAAIP,EAAMG,gBAAgBI,OAE5B,6BACE,kCACA,2BAAIP,EAAMG,gBAAgBK,MAAM,GAAGC,YAErC,6BACE,qCACA,2BAAIT,EAAMG,gBAAgBO,MAAM,GAAGC,KAAKJ,QCThD,IAAMK,EAAQC,EAAQ,IAoEPC,E,kDAjEb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAQ,CACXC,eAAgB,GAChBC,OAAQ,KACRd,gBAAiB,MAEnB,EAAKe,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAPV,E,6MAYEP,EAAMQ,IAAI,+C,cAAvBC,E,OACAJ,EAASI,EAAKC,KAAKC,QAAQC,KAAKC,MAAsB,IAAhBD,KAAKP,W,SACnBL,EAAMQ,IAAIH,EAAOS,K,OAAzCvB,E,OACJwB,KAAKC,SAAS,CACZZ,eAAgBK,EAAKC,KAAKC,QAC1BN,OAAQA,EACRd,gBAAiBA,EAAgBmB,O,kDAGnCO,QAAQC,IAAR,M,mMAIsBC,G,gFACxBA,EAAMC,iB,SAEAf,EAASU,KAAKZ,MAAMC,eAAeQ,KAAKC,MAAsB,IAAhBD,KAAKP,W,SAC3BL,EAAMQ,IAAIH,EAAOS,K,OAAzCvB,E,OACJwB,KAAKC,SAAS,CACZzB,gBAAiBA,EAAgBmB,O,gDAGnCO,QAAQC,IAAR,M,+IAIM,IAAD,OACSH,KAAKZ,MAAMZ,gBAC3B,OACE,yBAAKF,UAAU,OACb,kBAAC,IAAD,KACE,uCACC0B,KAAKZ,MAAMZ,iBACV,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8B,KAAK,IACLC,OAAQ,SAAAlC,GAAK,OACX,kBAAC,EAAD,eAASG,gBAAiB,EAAKY,MAAMZ,iBAAqBH,QAIhE,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAASV,KAAKT,qBAAtB,0B,GAxDEoB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.a3174891.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport default function index(props) {\r\n  return (\r\n    <div className=\"showing\">\r\n      <img src={props.completePokemon.sprites.front_default} alt={props.completePokemon.name} />\r\n      <div>\r\n        <h3>Name</h3>\r\n        <p>{props.completePokemon.name}</p>\r\n      </div>\r\n      <div>\r\n        <h3>HP</h3>\r\n        <p>{props.completePokemon.stats[5].base_stat}</p>\r\n      </div>\r\n      <div>\r\n        <h3>Types</h3>\r\n        <p>{props.completePokemon.types[0].type.name}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect, Link } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { Button, Form } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pokemon from './../src/Components/Pokemon/index';\nconst axios = require('axios');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listOfPokemons: [],\n      random: null,\n      completePokemon: null\n    };\n    this.updateRandomPokemon = this.updateRandomPokemon.bind(this);\n  }\n\n  async componentDidMount() {\n    try {\n      let list = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=150');\n      let random = list.data.results[Math.floor(Math.random() * 150)];\n      let completePokemon = await axios.get(random.url);\n      this.setState({\n        listOfPokemons: list.data.results,\n        random: random,\n        completePokemon: completePokemon.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async updateRandomPokemon(event) {\n    event.preventDefault();\n    try {\n      let random = this.state.listOfPokemons[Math.floor(Math.random() * 150)];\n      let completePokemon = await axios.get(random.url);\n      this.setState({\n        completePokemon: completePokemon.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    const pokemon = this.state.completePokemon;\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <h1>Pokemon</h1>\n          {this.state.completePokemon && (\n            <>\n              <Switch>\n                <Route\n                  path=\"*\"\n                  render={props => (\n                    <Pokemon completePokemon={this.state.completePokemon} {...props} />\n                  )}\n                />\n              </Switch>\n              <Form>\n                <Button onClick={this.updateRandomPokemon}>Outro Pokemon?</Button>\n              </Form>\n            </>\n          )}\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}